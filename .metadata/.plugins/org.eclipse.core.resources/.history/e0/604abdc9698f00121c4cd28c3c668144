package dataStructures;

import java.util.ArrayList;
import java.util.PriorityQueue;
import java.util.Queue;

// BinarySearchTree class
//
// CONSTRUCTION: with no initializer
//
// ******************PUBLIC OPERATIONS*********************
// void insert( x )       --> Insert x
// void remove( x )       --> Remove x
// Comparable find( x )   --> Return item that matches x
// Comparable findMin( )  --> Return smallest item
// Comparable findMax( )  --> Return largest item
// boolean isEmpty( )     --> Return true if empty; else false
// void makeEmpty( )      --> Remove all items
// void printTree( )      --> Print tree in sorted order

/**
 * Implements an unbalanced binary search tree. Note that all "matching" is
 * based on the compareTo method.
 * 
 * @author Mark Allen Weiss
 */
public class BinarySearchTree {
	/**
	 * Construct the tree.
	 */
	public BinarySearchTree() {
		root = null;
	}

	/** The tree root. */
	private BinaryNode root;
	
	
	
	// Find the maximum sum of a path through a binary tree
	public static int maxDepthSum(BinaryNode rootNode){
		if(rootNode == null){
			return 0;
		}
		if(rootNode.left == null && rootNode.right == null)
			return rootNode.data;
		else if(rootNode.left == null)
			return rootNode.data + maxDepthSum(rootNode.right);
		else if(rootNode.right == null)
			return rootNode.data + maxDepthSum(rootNode.left);		
		else return rootNode.data + Math.max(maxDepth(rootNode.left), maxDepth(rootNode.right));
	}
	
	/**
	 * Write a program to return a max BST within a given B-tree
	 */
	public int findMaxBST(BinaryNode rootNode){
		if(rootNode == null) return 0;
		int left, right, max;
		max = rootNode.data;
		left = findMaxBST(rootNode.left);
		if(left > max) {
			max = left;
		}
		right = findMaxBST(rootNode.right);
		if(right > max){
			max = right;
		}
		return max;
	}
	/**
	 * Check if a tree is balanced
	 * find the max and min paths
	 * check if the difference between them is <= 1
	 */
	
	// Find the max depth 
	public static int maxDepth(BinaryNode rootNode){
		if(rootNode == null){
			return 0;
		}
		else return 1 + Math.max(maxDepth(rootNode.left), maxDepth(rootNode.right));
	}
	
	// Find the min depth
	public static int minDepth(BinaryNode rootNode){
		if(rootNode == null){
			return 0;
		}
		else return 1 + Math.min(minDepth(rootNode.left), minDepth(rootNode.right));
	}
	
	// check to find difference between max and min depth
	public static boolean isBalanced(BinaryNode rootNode){
		return ((maxDepth(rootNode) - minDepth(rootNode)) <= 1);
	}
	
	/**
	 * Check if a given tree is a BST
	 * Do inorder traversal, and check is previous member is less than current
	 * if yes, return true
	 */
	
	public static boolean isBST(BinaryNode rootNode, int max,int min) {
		if (rootNode == null) return true;
		boolean leftOk = true;
		boolean rightOk = true;
		boolean centerOk = true;
		// check left subtree
		if (rootNode.left != null)
			leftOk = isBST(rootNode.left, rootNode.data, min);
		// check root
		if (rootNode.data >= min && rootNode.data <= max)
			centerOk = true;
		else
			centerOk = false;
		// check right subtree
		if (rootNode.right != null)
			rightOk = isBST(rootNode.right, max, rootNode.data);
		return leftOk && centerOk && rightOk;
	}
	
	
	/*public static boolean isBSTMyApproach(BinaryNode rootNode){
		
		if(rootNode == null) return false;
		else if(rootNode.left == null && rootNode.right == null) return false;
		else if(rootNode.left == null){
			if(rootNode.data < rootNode.right.data){
				return isBSTMyApproach(rootNode.right);
			}
		}else if(rootNode.right == null){
			if(rootNode.data > rootNode.left.data){
				return isBSTMyApproach(rootNode.left);
			}
		} else return (isBSTMyApproach(rootNode.left) && isBSTMyApproach(rootNode.right));
	}*/
	
	
	/**
	 * Given a sorted (increasing order) array, write an algorithm to create
	 * a binary tree with minimal height.
	 * Solution: We will try to create a binary tree such that for each node, 
	 * the number of nodes in the left subtree and the right subtree are e
	 * Algorithm:
	 * 1. Insert into the tree the middle element of the array.
	 * 2. Insert (into the left subtree) the left subarray elements
	 * 3. Insert (into the right subtree) the right subarray elements
	 * 4. Recurse
	 */	
	 
	public static BinaryNode createMinimalBST(int[] arr){
		return addToTree(arr,0,arr.length - 1);		
	}
	
	// method to create the tree
	public static BinaryNode addToTree(int[] arr, int start, int end) {
		
		if(end < start) return null;
		// find the mid number
		int mid = (start + end) / 2;
		// create the root node
		BinaryNode rootNode = new BinaryNode(arr[mid]);
		// create the left subtree
		rootNode.left = addToTree(arr, start, mid - 1);
		// create the right subtree
		rootNode.right = addToTree(arr, mid + 1, end);
		return rootNode;
	}

	/**
	 * IMPORTANT: Find the least common ancestor for any two given nodes in a Binary search tree
	 * Check if nodes a and b are in left and right subtrees, if yes, return root node
	 * else check in left and right subtrees
	 */
	public BinaryNode findLCA(BinaryNode rootNode, BinaryNode a, BinaryNode b){
		if(rootNode == null){
			return null;
		}
		if((rootNode.data > a.data & rootNode.data < b.data) || (rootNode.data < a.data & rootNode.data > b.data)){
			return rootNode;
		}else{
			if(rootNode.data < a.data & rootNode.data < b.data){
				return findLCA(rootNode.right, a, b);
			}else{
				return findLCA(rootNode.left, a, b);
			}
		}
	}	
	
	/**
	 * IMPORTANT: Given a binary search tree, design an algorithm which creates a
	 * linked list of all the nodes at each depth.
	 */
	public static ArrayList<java.util.LinkedList<BinaryNode>> findLevelLinkList(
			BinaryNode rootNode) {
		// initialize level to 0
		int level = 0;
		// the result will contain a List of LinkedList of Nodes
		ArrayList<java.util.LinkedList<BinaryNode>> resultList = new ArrayList<java.util.LinkedList<BinaryNode>>();
		// create the list to hold the nodes at each level
		// CANNOT SAY: List<BinaryNode> BECAUSE IT IS GENERICS AND ONLY AND ONLY
		// THE DECLARED TYPE SHOULD BE USED TO ADD TO THE LIST
		java.util.LinkedList<BinaryNode> nodeList = new java.util.LinkedList<BinaryNode>();
		nodeList.add(rootNode);
		resultList.add(level, nodeList);
		while (true) {
			// iterate till the size of the arraylist at that level
			for (int i = 0; i < resultList.get(level).size(); i++) {
				BinaryNode temp = resultList.get(level).get(i);
				if (temp != null) {
					if (temp.left != null) {
						nodeList.add(temp.left);
					}
					if (temp.right != null) {
						nodeList.add(temp.right);
					}
				}
			}
			if (nodeList.size() > 0) {
				resultList.add(level + 1, nodeList);
			} else {
				break;
			}
			level++;
		}
		return resultList;

	}
	
	/**
	 * IMPORTANT: Given a binary tree return the level with maximum number of nodes.
	 * Algorithm:
	 * 1. Run a BFS, starting from root node.
	 * 2. Keep track of levels and no. of nodes in each level.
	 * 3. Update max_nodes_in_level and level_number, with no. of nodes in current level and current level number, 
	 *    IF no.of nodes in current level > max_nodes_in_level.
	 * 4. Return level_number.
	 */	 
	public void MaxNodesLevel(BinaryNode rootNode) {
		// the current queue
		Queue<BinaryNode> currentQueue = new PriorityQueue<BinaryNode>();
		// queue at the next level
		Queue<BinaryNode> nextlevelQueue;
		BinaryNode temp;
		// level of maximum nodes
		int maxNodeslevel = 0;
		// no. of nodes at the previous level
		int prevLevelCount_Nodes = 0;
		// max. no. of nodes
		int maxNodes = 0;
		// no. of nodes at the current level
		int currentlevelCount_Nodes = 0;

		// add the root node
		if (rootNode != null) {
			currentQueue.add(rootNode);
		}
		// perform BFS: while Q is not empty, deQueue(Q)
		while (!currentQueue.isEmpty()) {
			nextlevelQueue = new PriorityQueue<BinaryNode>();
			// deQueue(Q)
			while ((temp = currentQueue.poll()) != null) {
				if (temp.left != null) {
					nextlevelQueue.add(temp.left);
				}
				if (temp.right != null) {
					nextlevelQueue.add(temp.right);
				}
			}
			
			// set count of nodes in current level as length of nextlevelQueue 
			currentlevelCount_Nodes = nextlevelQueue.size();
			// Update max_nodes_in_level and level_number, with no. of nodes in current level and current level number.
			// update maxNodes 
			maxNodes = prevLevelCount_Nodes > currentlevelCount_Nodes ? prevLevelCount_Nodes
					: currentlevelCount_Nodes;			
			// increase maxNodeslevel or keep it same  
			maxNodeslevel += (maxNodes == currentlevelCount_Nodes) ? 1 : 0;
			// set previous count as maxNodes, for next iteration
			prevLevelCount_Nodes = maxNodes;
			// set currentQueue as nextlevelQueue for next iteration
			currentQueue = nextlevelQueue;
		}
	}
	
	/**
	 * Flatten Binary Tree to Linked List
	 */
	public void flattenTree(BinaryNode rootNode){
		if(rootNode == null) return;
		if(rootNode.left != null){
			BinaryNode rightSubtree = rootNode.right;
			rootNode.right = rootNode.left;
			rootNode.left = null;
			BinaryNode tempRight = rootNode.right;
			while(tempRight.right != null){
				tempRight = tempRight.right;
			}
			tempRight.right = rightSubtree;			
		}
		flattenTree(rootNode.right);
	}
	
	/**
	 * Design a Binary Search Algorithm
	 */
	// Binary Search: Iterative version
	public BinaryNode BSTIterative(BinaryNode rootNode, int key){
		BinaryNode current = rootNode;
		while(current != null){
			if(current.data == key) return current;
			else if(key < current.data){
				current = rootNode.left;
			}else{
				current = rootNode.right;
			}
		}
		return current;
	}
	
	// Binary Search: Recursive version
	public BinaryNode BSTRecursive(BinaryNode rootNode, int key){
		BinaryNode current = rootNode;
		if(current == null) return null;
		if(current.data == key) return current;
		else if(key < rootNode.data){
			BSTRecursive(rootNode.left, key);
		}else{
			 BSTRecursive(rootNode.right, key);
		}
		return current;
	}
	
	/**
	 * Insert an element into a BST
	 */
	// Insertion: Iterative Version
	public void insertIterative(int data){
		if(root == null){
			root = new BinaryNode(data);
			return;
		}
		BinaryNode current = root;
		while(current != null){
			if(root.data == data) return;
			if(data < root.data){
				if(root.left == null){
					root.left = new BinaryNode(data);
					return;
				}else{
					current = root.left;
				}
			}else{
				if(root.right == null){
					root.right = new BinaryNode(data);
					return;
				}else{
					current = root.right;
				}
			}
		}
	}
	
	// Insertion: Recursive Version
	public void insertRecursive(int data){
		BinaryNode current = root;
		if(root == null){
			root = new BinaryNode(data);
		}else{
			internlInsert(current, data);
		}
	}
	

	private void internlInsert(BinaryNode current, int data) {
		if(current.data == data){
			return;
		}else if(data < root.data){
			if(root.left == null){
				root.left = new BinaryNode(data);
			}else{
				internlInsert(current.left, data);
			}
		}else{
			if(root.right == null){
				root.right = new BinaryNode(data);
			}else{
				internlInsert(current.right, data);
			}
		}
		
	}

	/**
	 * Insert into the tree; duplicates are ignored.
	 * 
	 * @param x
	 *            the item to insert.
	 */
	public void insert(Comparable x) {
		root = insert(x, root);
	}

	/**
	 * Remove from the tree. Nothing is done if x is not found.
	 * 
	 * @param x
	 *            the item to remove.
	 */
	public void remove(Comparable x) {
		root = remove(x, root);
	}

	/**
	 * Find the smallest item in the tree.
	 * 
	 * @return smallest item or null if empty.
	 */
	public Comparable findMin() {
		return elementAt(findMin(root));
	}

	/**
	 * Find the largest item in the tree.
	 * 
	 * @return the largest item of null if empty.
	 */
	public Comparable findMax() {
		return elementAt(findMax(root));
	}

	/**
	 * Find an item in the tree.
	 * 
	 * @param x
	 *            the item to search for.
	 * @return the matching item or null if not found.
	 */
	public Comparable find(Comparable x) {
		return elementAt(find(x, root));
	}

	/**
	 * Make the tree logically empty.
	 */
	public void makeEmpty() {
		root = null;
	}

	/**
	 * Test if the tree is logically empty.
	 * 
	 * @return true if empty, false otherwise.
	 */
	public boolean isEmpty() {
		return root == null;
	}

	/**
	 * Print the tree contents in sorted order.
	 */
	public void printTree() {
		if (isEmpty())
			System.out.println("Empty tree");
		else
			printTree(root);
	}

	/**
	 * Internal method to get element field.
	 * 
	 * @param t
	 *            the node.
	 * @return the element field or null if t is null.
	 */
	private Comparable elementAt(BinaryNode t) {
		return t == null ? null : t.element;
	}

	/**
	 * Internal method to insert into a subtree.
	 * 
	 * @param x
	 *            the item to insert.
	 * @param t
	 *            the node that roots the tree.
	 * @return the new root.
	 */
	private BinaryNode insert(Comparable x, BinaryNode t) {
		/* 1 */if (t == null)
			/* 2 */t = new BinaryNode(x, null, null);
		/* 3 */else if (x.compareTo(t.element) < 0)
			/* 4 */t.left = insert(x, t.left);
		/* 5 */else if (x.compareTo(t.element) > 0)
			/* 6 */t.right = insert(x, t.right);
		/* 7 */else
			/* 8 */; // Duplicate; do nothing
			/* 9 */
		return t;
	}

	/**
	 * Internal method to remove from a subtree.
	 * 
	 * @param x
	 *            the item to remove.
	 * @param t
	 *            the node that roots the tree.
	 * @return the new root.
	 */
	private BinaryNode remove(Comparable x, BinaryNode rootNode) {
		if (rootNode == null)
			return rootNode; // Item not found; do nothing
		if (x.compareTo(rootNode.element) < 0)
			rootNode.left = remove(x, rootNode.left);
		else if (x.compareTo(rootNode.element) > 0)
			rootNode.right = remove(x, rootNode.right);
		else if (rootNode.left != null && rootNode.right != null) // Two children
		{
			rootNode.element = findMin(rootNode.right).element;
			rootNode.right = remove(rootNode.element, rootNode.right);
		} else
			rootNode = (rootNode.left != null) ? rootNode.left : rootNode.right;
		return rootNode;
	}

	/**
	 * Internal method to find the smallest item in a subtree.
	 * Keep searching for the leftmost node
	 * 
	 * @param t
	 *            the node that roots the tree.
	 * @return node containing the smallest item.
	 */
	// Iterative version
	private BinaryNode findMin(BinaryNode t) {
		// Recursive version (commented out)
		/*if (t == null)
			return null;
		else if (t.left == null)
			return t;
		return findMin(t.left);*/
		if(t != null){
			while(t.left != null){
				t = t.left;
			}
		}
		return t;
	}

	/**
	 * Internal method to find the largest item in a subtree.
	 * Keep searching for the rightmost node
	 * @param t
	 *            the node that roots the tree.
	 * @return node containing the largest item.
	 */
	// Iterative version
	private BinaryNode findMax(BinaryNode t) {
		if (t != null)
			while (t.right != null)
				t = t.right;

		return t;
	}

	/**
	 * Internal method to find an item in a subtree.
	 * 
	 * @param x
	 *            is item to search for.
	 * @param t
	 *            the node that roots the tree.
	 * @return node containing the matched item.
	 */
	private BinaryNode find(Comparable x, BinaryNode t) {
		if (t == null)
			return null;
		if (x.compareTo(t.element) < 0)
			return find(x, t.left);
		else if (x.compareTo(t.element) > 0)
			return find(x, t.right);
		else
			return t; // Match
	}

	/**
	 * Internal method to print a subtree in sorted order.
	 * 
	 * @param t
	 *            the node that roots the tree.
	 */
	private void printTree(BinaryNode t) {
		if (t != null) {
			printTree(t.left);
			System.out.println(t.element);
			printTree(t.right);
		}
	}

	
	// Test program
	public static void main(String[] args) {
		//BinarySearchTree t = new BinarySearchTree();
		//final int NUMS = 4000;
		//final int GAP = 37;

		System.out.println("Checking... (no more output means success)");

		/*for (int i = GAP; i != 0; i = (i + GAP) % NUMS)
			t.insert(new MyInteger(i));

		for (int i = 1; i < NUMS; i += 2)
			t.remove(new MyInteger(i));

		if (NUMS < 40)
			t.printTree();
		if (((MyInteger) (t.findMin())).intValue() != 2
				|| ((MyInteger) (t.findMax())).intValue() != NUMS - 2)
			System.out.println("FindMin or FindMax error!");

		for (int i = 2; i < NUMS; i += 2)
			if (((MyInteger) (t.find(new MyInteger(i)))).intValue() != i)
				System.out.println("Find error1!");

		for (int i = 1; i < NUMS; i += 2) {
			if (t.find(new MyInteger(i)) != null)
				System.out.println("Find error2!");*/
		//}
	}
}
