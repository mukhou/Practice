
/**
 * Given an n-by-n matrix of 0's and 1's where all
 * 1's in each row come before all 0's, find the most efficient way
 * to return the row with the maximum number of 0's.
 */
package com.careercup.matrix;

public class RowWithMaxZeroes {

	public static void findMaxZeroesRow(int[][] a){
		int rows = a.length;
		int cols = a[0].length;
		int i = rows;
		int j = cols - 1;
		int maxRowCount = 0;
		int currentRowCount = 0;
		while(i < rows && j >= 0){
			if(a[i][j] == 0){
				currentRowCount  = currentRowCount + 1;
			}
			if(maxRowCount < currentRowCount){
				maxRowCount = currentRowCount;
			}
		}
		
		System.out.println(maxRowCount);
	}
	public static void main(String[] args) {
		int arr[][]= {
				{1,1,1,1},
                {1,1,0,0},
                {1,0,0,0},
                {1,1,0,0},
                };
		
		findMaxZeroesRow(a);
                

	}

}
